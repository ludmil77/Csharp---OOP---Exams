using NUnit.Framework;
using System;

namespace RepairShop.Tests
{
    public class RepairShopTests
    {
        [SetUp]
        public void Setup()
        {
        }

        [Test]
        public void GarageConstructorShouldWorkingCorectly()
        {
            Garage garage = new Garage("Ludmil", 5);
            string expectedName = garage.Name;
            int expectedMechanicsAvailable = garage.MechanicsAvailable;
            Assert.AreEqual(expectedName, "Ludmil");
            Assert.AreEqual(expectedMechanicsAvailable, 5);
        }
        [Test]

        public void GarageConstructorShouldThrowException()
        {
            Assert.Throws<ArgumentNullException>(() => new Garage("", 5));
            Assert.Throws<ArgumentException>(() => new Garage("Ludmil", 0));
        }
        [Test]

        public void AddCarShouldWorkingCorectly()
        {
            Garage garage = new Garage("Ludmil", 2);
            Car car1 = new Car("BMW", 0);
            Car car2 = new Car("Mercedes", 0);
            garage.AddCar(car1);
            garage.AddCar(car2);
            int expectedCount = garage.CarsInGarage;
            Assert.AreEqual(expectedCount, 2);
        }
        [Test]

        public void AddCarShouldThrowException()
        {
            Garage garage = new Garage("Ludmil", 2);
            Car car1 = new Car("BMW", 0);
            Car car2 = new Car("Mercedes", 0);
            Car car3 = new Car("Lada", 0);
            garage.AddCar(car1);
            garage.AddCar(car2);
            Assert.Throws<InvalidOperationException>(() => garage.AddCar(car3));
        }
        [Test]

        public void FixCarShouldThrowException()
        {
            Garage garage = new Garage("Ludmil", 2);
            Car car1 = new Car("Mercedes", 0);
            garage.AddCar(car1);
            Assert.Throws<InvalidOperationException>(() => garage.FixCar("Lada"));
        }
        [Test]

        public void FixCarShouldWorkingCorectly()
        {
            Garage garage = new Garage("Ludmil", 2);
            Car car1 = new Car("Mercedes", 0);
            garage.AddCar(car1);
            Assert.AreEqual(car1.NumberOfIssues, 0);
        }
        [Test]

        public void RevoveFixedCarShouldThrowException()
        {
            Garage garage = new Garage("Ludmil", 2);
            Car car1 = new Car("Mercedes", 1);
            garage.AddCar(car1);
            Assert.Throws<InvalidOperationException>(() => garage.RemoveFixedCar());
        }
        [Test]

        public void RevoveFixedCarShouldWorkingCorectly()
        {
            Garage garage = new Garage("Ludmil", 2);
            Car car1 = new Car("Mercedes", 0);
            Car car2 = new Car("BMW", 1);
            garage.AddCar(car1);
            garage.AddCar(car2);
            Assert.AreEqual(garage.RemoveFixedCar(), 1);
        }
        [Test]

        public void ReportShouldWorkingCorectly()
        {
            Garage garage = new Garage("Ludmil", 2);
            Car car1 = new Car("Mercedes", 0);
            Car car2 = new Car("BMW", 1);
            garage.AddCar(car1);
            garage.AddCar(car2);

            Assert.AreEqual(garage.Report(), $"There are 1 which are not fixed: BMW.");
        }
    }
}
